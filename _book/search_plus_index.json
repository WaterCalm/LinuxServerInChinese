{"./":{"url":"./","title":"前言的前言","keywords":"","body":"前言的前言 Docker在手，天下我有 自从接触了Docker越来越喜欢这个东西了。简而言之就是部署简单，很适合新手或者像我这样的菜鸟去快速部署自己想要的服务来达到自己的目的。 比如，你家里有一个NAS，按平常来说它也只能安安静静地躺在家里，只能等待你回家后才能宠幸它。如果有了Docker，你可以轻松地搭建一个NextCloud再配合ddns，你就可以随时随地宠幸您的NAS。什么？你说NAS服务商提供了远程访问服务？那你可以再看看那高昂的服务费和上传下载的龟速，配得上你每年花费千余元办理的宽带吗？ 再比如，你想呼朋引伴一起Happy，但又奈何大家又天南海北。如果有了Docker，你可以轻松地搭建一个Minetest服务器。大家一起去你的服务器上玩游戏，这感觉是不是倍儿爽？ 再比如，你喜欢记笔记，但又觉得那些云服务不好用或不安全，更或者说你想记一些私密到极致的东西。如果有了Docker，你可以轻松地搭建一个BookStack。别说记笔记了，写出一部长篇巨著也是指日可待。 再比如，虽然你现在正在干着碌碌无为的工作，但你心怀科幻对核物理、量子世界充满着好奇。如果有了Docker，你可以轻松地搭建一个boinc。在boinc上为全国乃至全世界的科研机构贡献一下你过剩的计算资源，或许有一天某个重要的科研成果的背后就有你贡献的计算结果。 再比如……再多的比如，都不如自己亲自动手试一下，体验一下“Docker在手，天下我有”！ LinuxServer.io Docker这东西最重要的就是镜像（image），LinuxServer则维护、发布了大量的开源软件的Docker镜像。可以理解为这个组织是Docker界的小米，在它出现之前Docker镜像的质量参差不齐标准不一，而LinuxServer则将一批优质的开源软件制作成Docker镜像并统一标准，能让广大拥有家庭服务器的小白和非专业爱好者们通过Docker充分体验什么叫科技改变世界。 那我要做什么？ 也许是因为国内Docker用户还主要局限于企业以及专业人士，也许国内的家庭服务器（或NAS）的普及度还没那么高，很少能找到Docker对普通用户的意义，甚至百度“有趣的Docker镜像”也只是零星的几篇文章。所以我打算新建一个GitBook翻译一下LinuxServer.io的文档和他们发布的镜像，希望能帮到有需要的人。 当然，我也是一个小白，在翻译的过程中我可能并不会完全按照原文进行翻译，其中也会加入自己的理解和注释。如果出现不是特别准确的地方，还请各位大佬指正。 因为LinuxServer官方的文档不包括Docker的安装以及适合小白的Portainer安装所以我会在正式开始之前先进行一些补充。感兴趣的可以先看安装Docker、Portainer-可视化管理Docker这两篇文章后再去看前言。 powered by Gitbook该页面修订时间： 2020-10-15 16:14:52 "},"before/docker-install.html":{"url":"before/docker-install.html","title":"安装Docker","keywords":"","body":"安装Docker 使用脚本安装Docker Linux安装 Docker官方为了简化安装流程，提供了一套安装脚本，可以直接在终端中执行下面这条命令 curl -sSL https://get.docker.com/ | sh 如果在国内直接这么用可能会被感人的网速感动到，可以在后面加上阿里云的镜像。 curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 当然，也可以用DaoCloud提供的安装脚本 curl -sSL https://get.daocloud.io/docker | sh 阿里云的官方也提供了一个安装脚本 curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh 安装过程中只需要静静地等待即可…… Windows & macOS安装 对于Windows和macOS来说，只要去docker的官网下载对应系统的版本就好。 → Docker Get Started 但我强烈不建议在Windows上安装docker，总会遇到各种各样奇奇怪怪的问题。我曾在两台不同的Windows电脑上安装过Docker，最后都毅然决然地卸载了。如果在Windows平台，可以尝试使用Windows的Linux子系统功能来体验Docker。 → 适用于 Linux 的 Windows 子系统文档 配置镜像加速 安装完成后，我是都习惯于修改下镜像源，不然有可能遇到网络问题。 可以使用DaoCloud提供的脚本来添加镜像源，可以把最后的加速地址换成自己的 curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io 也可以参照阿里云提供的方式手动设置（阿里云容器镜像服务） sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json 其实很简单，docker会读取在/etc/docker目录下的daemon.json文件作为配置。默认是没有这个文件的，新建一个就好，之后再用docker pull镜像的时候，就会从镜像源去拉取，提升了速度与稳定性。 到此为止，docker的安装就完成了。 powered by Gitbook该页面修订时间： 2020-10-15 16:56:16 "},"before/portainer.html":{"url":"before/portainer.html","title":"Portainer - 可视化管理Docker","keywords":"","body":"Portainer - 可视化管理Docker Portainer是一个优秀的Docker、Swarm、Kubernetes等容器服务的管理工具，拥有简单明了的UI界面。这里我们只要知道这东西可以可视化管理Docker就好，功能很强大，但对于我们小白来说最直观的感受就是告别了黑白的命令行。 拉取镜像 拉取镜像前，我们可以先去 Docker Hub 搜索一下，一般来说在这里都能找到对应镜像的文档。https://hub.docker.com/ [!WARNING] portainer/portainer 镜像目前已不被推荐使用，应该使用 portainer/portainer-ce 镜像 在命令行下拉取镜像，如果非root用户或者提示权限问题，记得在命令前加上 sudo docker pull portainer/portainer-ce 因为portainer需要一个卷（volume）来保存配置和相关数据，我们可以用docker创建一个匿名卷，也可以选择挂载一个本地的目录。 [!NOTE] 官方的提供的部署命令中除了开放9000端口外，还开放了8000端口。但我们只通过浏览器访问portainer，所以只开放9000端口即可。 #创建匿名卷 docker volume create portainer_data #部署容器 docker run -d -p 9000:9000 --name=portainer -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce 如果想挂载到本地目录只需要把 portainer_data 修改为本地的绝对路径即可。 docker的部署命令中，涉及到端口和卷的映射时，都是这种格式 宿主机:容器内 。 [!TIP] 建议大家把docker容器的部署命令写在一个 shell 文件中，并赋予文件执行权限。这样如果日后需要更新容器或者重新部署的时候，只要运行这个shell文件即可。 #创建文件 nano portainer.sh #把命令写入文件，可以用这种格式方便阅读，记得每行结尾要有“ \\”，不然会报错 docker run -d \\ -p 9000:9000 \\ --name=portainer \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /docker/portainer:/data \\ portainer/portainer-ce #写入完成后保存，nano编辑器就是 ctrl+o写入，ctrl+x退出。vi编辑器则是 按esc后输入 :wq #赋予脚本执行权限 chmod +x portainer.sh #执行脚本部署容器 ./portainer.sh 部署成功后，会返回容器的id。 然后我们在浏览器中输入 http://ipaddress:9000 即可访问portainer的WEB UI界面 之后，我们按照界面的提示创建管理员账号、选择本地容器就可以进入主界面了。 powered by Gitbook该页面修订时间： 2020-10-15 18:00:00 "},"Introduction.html":{"url":"Introduction.html","title":"前言","keywords":"","body":"前言 这里是原始的介绍 powered by Gitbook该页面修订时间： 2020-10-15 14:46:22 "},"general/container-execution.html":{"url":"general/container-execution.html","title":"Container Execution","keywords":"","body":"Container Execution powered by Gitbook该页面修订时间： 2020-10-15 11:30:04 "},"general/containers-101.html":{"url":"general/containers-101.html","title":"Docker Containers: 101","keywords":"","body":"Docker Containers: 101 powered by Gitbook该页面修订时间： 2020-10-15 11:30:04 "},"general/running-our-containers.html":{"url":"general/running-our-containers.html","title":"Running LinuxServer Containers","keywords":"","body":"Running LinuxServer Containers powered by Gitbook该页面修订时间： 2020-10-15 11:30:04 "},"general/docker-compose.html":{"url":"general/docker-compose.html","title":"Docker Compose","keywords":"","body":"Docker Compose powered by Gitbook该页面修订时间： 2020-10-15 11:30:04 "},"general/understanding-puid-and-pgid.html":{"url":"general/understanding-puid-and-pgid.html","title":"Understanding PUID and PGID","keywords":"","body":"Understanding PUID and PGID powered by Gitbook该页面修订时间： 2020-10-15 11:30:04 "},"general/updating-our-containers.html":{"url":"general/updating-our-containers.html","title":"Updating our containers","keywords":"","body":"Updating our containers powered by Gitbook该页面修订时间： 2020-10-15 11:30:04 "},"general/volumes.html":{"url":"general/volumes.html","title":"Volumes","keywords":"","body":"Volumes powered by Gitbook该页面修订时间： 2020-10-15 11:30:04 "},"general/fleet.html":{"url":"general/fleet.html","title":"Fleet","keywords":"","body":"Fleet powered by Gitbook该页面修订时间： 2020-10-15 11:30:04 "},"general/swag.html":{"url":"general/swag.html","title":"SWAG setup1111111111111111111111111111111111","keywords":"","body":"SWAG setup powered by Gitbook该页面修订时间： 2020-10-15 11:30:04 "},"images/docker-airsonic.html":{"url":"images/docker-airsonic.html","title":"linuxserver/airsonic","keywords":"","body":"linuxserver/airsonic powered by Gitbook该页面修订时间： 2020-10-15 11:30:04 "}}